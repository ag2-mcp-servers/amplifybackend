# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:33:05+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query

from models import (
    BackendAppIdApiBackendEnvironmentNameDetailsPostRequest,
    BackendAppIdApiBackendEnvironmentNameGenerateModelsPostRequest,
    BackendAppIdApiBackendEnvironmentNameGetModelsPostRequest,
    BackendAppIdApiBackendEnvironmentNamePostRequest,
    BackendAppIdApiBackendEnvironmentNameRemovePostRequest,
    BackendAppIdApiPostRequest,
    BackendAppIdAuthBackendEnvironmentNameDetailsPostRequest,
    BackendAppIdAuthBackendEnvironmentNameImportPostRequest,
    BackendAppIdAuthBackendEnvironmentNamePostRequest,
    BackendAppIdAuthBackendEnvironmentNameRemovePostRequest,
    BackendAppIdAuthPostRequest,
    BackendAppIdConfigPostRequest,
    BackendAppIdConfigUpdatePostRequest,
    BackendAppIdDetailsPostRequest,
    BackendAppIdEnvironmentsBackendEnvironmentNameClonePostRequest,
    BackendAppIdJobBackendEnvironmentNameJobIdPostRequest,
    BackendAppIdJobBackendEnvironmentNamePostRequest,
    BackendAppIdRemovePostRequest,
    BackendAppIdStorageBackendEnvironmentNameDetailsPostRequest,
    BackendAppIdStorageBackendEnvironmentNameImportPostRequest,
    BackendAppIdStorageBackendEnvironmentNamePostRequest,
    BackendAppIdStorageBackendEnvironmentNameRemovePostRequest,
    BackendAppIdStoragePostRequest,
    BackendPostRequest,
    BadRequestException,
    CloneBackendResponse,
    CreateBackendAPIResponse,
    CreateBackendAuthResponse,
    CreateBackendConfigResponse,
    CreateBackendResponse,
    CreateBackendStorageResponse,
    CreateTokenResponse,
    DeleteBackendAPIResponse,
    DeleteBackendAuthResponse,
    DeleteBackendResponse,
    DeleteBackendStorageResponse,
    DeleteTokenResponse,
    GatewayTimeoutException,
    GenerateBackendAPIModelsResponse,
    GetBackendAPIModelsResponse,
    GetBackendAPIResponse,
    GetBackendAuthResponse,
    GetBackendJobResponse,
    GetBackendResponse,
    GetBackendStorageResponse,
    GetTokenResponse,
    ImportBackendAuthResponse,
    ImportBackendStorageResponse,
    ListBackendJobsResponse,
    ListS3BucketsResponse,
    NotFoundException,
    RemoveAllBackendsResponse,
    RemoveBackendConfigResponse,
    S3BucketsPostRequest,
    TooManyRequestsException,
    UpdateBackendAPIResponse,
    UpdateBackendAuthResponse,
    UpdateBackendConfigResponse,
    UpdateBackendJobResponse,
    UpdateBackendStorageResponse,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='AWS Amplify Admin API',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='AmplifyBackend',
    version='2020-08-11',
    servers=[
        {
            'description': 'The AmplifyBackend multi-region endpoint',
            'url': 'http://amplifybackend.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The AmplifyBackend multi-region endpoint',
            'url': 'https://amplifybackend.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The AmplifyBackend endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://amplifybackend.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The AmplifyBackend endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://amplifybackend.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.post(
    '/backend',
    description=""" This operation creates a backend for an Amplify app. Backends are automatically created at the time of app creation. """,
    tags=['s3_bucket_operations', 'auth_config_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_backend(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/api',
    description=""" Creates a new backend API resource. """,
    tags=[
        'api_management',
        'auth_config_management',
        'configuration_management',
        'backend_operations_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_backend_a_p_i(
    app_id: str = Path(..., alias='appId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdApiPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/api/{backendEnvironmentName}',
    description=""" Updates an existing backend API resource. """,
    tags=['api_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_backend_a_p_i(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdApiBackendEnvironmentNamePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/api/{backendEnvironmentName}/details',
    description=""" Gets the details for a backend API. """,
    tags=[
        'api_management',
        'configuration_management',
        'backend_operations_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_backend_a_p_i(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdApiBackendEnvironmentNameDetailsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/api/{backendEnvironmentName}/generateModels',
    description=""" Generates a model schema for an existing backend API resource. """,
    tags=['api_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def generate_backend_a_p_i_models(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdApiBackendEnvironmentNameGenerateModelsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/api/{backendEnvironmentName}/getModels',
    description=""" Gets a model introspection schema for an existing backend API resource. """,
    tags=[
        'api_management',
        'backend_operations_management',
        'configuration_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_backend_a_p_i_models(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdApiBackendEnvironmentNameGetModelsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/api/{backendEnvironmentName}/remove',
    description=""" Deletes an existing backend API resource. """,
    tags=[
        'backend_operations_management',
        'api_management',
        'configuration_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_backend_a_p_i(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdApiBackendEnvironmentNameRemovePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/auth',
    description=""" Creates a new backend authentication resource. """,
    tags=['auth_config_management', 'authentication_token_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_backend_auth(
    app_id: str = Path(..., alias='appId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdAuthPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/auth/{backendEnvironmentName}',
    description=""" Updates an existing backend authentication resource. """,
    tags=['auth_config_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_backend_auth(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdAuthBackendEnvironmentNamePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/auth/{backendEnvironmentName}/details',
    description=""" Gets a backend auth details. """,
    tags=['auth_config_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_backend_auth(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdAuthBackendEnvironmentNameDetailsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/auth/{backendEnvironmentName}/import',
    description=""" Imports an existing backend authentication resource. """,
    tags=['auth_config_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def import_backend_auth(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdAuthBackendEnvironmentNameImportPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/auth/{backendEnvironmentName}/remove',
    description=""" Deletes an existing backend authentication resource. """,
    tags=['auth_config_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_backend_auth(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdAuthBackendEnvironmentNameRemovePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/challenge',
    description=""" Generates a one-time challenge code to authenticate a user into your Amplify Admin UI. """,
    tags=[
        'api_management',
        'auth_config_management',
        'authentication_token_management',
        's3_bucket_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_token(
    app_id: str = Path(..., alias='appId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/backend/{appId}/challenge/{sessionId}',
    description=""" Gets the challenge token based on the given appId and sessionId. """,
    tags=['authentication_token_management', 'api_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_token(
    app_id: str = Path(..., alias='appId'),
    session_id: str = Path(..., alias='sessionId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/challenge/{sessionId}/remove',
    description=""" Deletes the challenge token based on the given appId and sessionId. """,
    tags=['authentication_token_management', 'api_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_token(
    app_id: str = Path(..., alias='appId'),
    session_id: str = Path(..., alias='sessionId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/config',
    description=""" Creates a config object for a backend. """,
    tags=[
        'api_management',
        'auth_config_management',
        'configuration_management',
        'backend_operations_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_backend_config(
    app_id: str = Path(..., alias='appId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdConfigPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/config/remove',
    description=""" Removes the AWS resources required to access the Amplify Admin UI. """,
    tags=[
        'api_management',
        'auth_config_management',
        'authentication_token_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_backend_config(
    app_id: str = Path(..., alias='appId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/config/update',
    description=""" Updates the AWS resources required to access the Amplify Admin UI. """,
    tags=['api_management', 'configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_backend_config(
    app_id: str = Path(..., alias='appId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdConfigUpdatePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/details',
    description=""" Provides project-level details for your Amplify UI project. """,
    tags=['api_management', 'auth_config_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_backend(
    app_id: str = Path(..., alias='appId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdDetailsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/environments/{backendEnvironmentName}/clone',
    description=""" This operation clones an existing backend. """,
    tags=['backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def clone_backend(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdEnvironmentsBackendEnvironmentNameClonePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/environments/{backendEnvironmentName}/remove',
    description=""" Removes an existing environment from your Amplify project. """,
    tags=['api_management', 'auth_config_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_backend(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/job/{backendEnvironmentName}',
    description=""" Lists the jobs for the backend of an Amplify app. """,
    tags=['job_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_backend_jobs(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdJobBackendEnvironmentNamePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/backend/{appId}/job/{backendEnvironmentName}/{jobId}',
    description=""" Returns information about a specific job. """,
    tags=['job_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_backend_job(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    job_id: str = Path(..., alias='jobId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/job/{backendEnvironmentName}/{jobId}',
    description=""" Updates a specific job. """,
    tags=['job_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_backend_job(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    job_id: str = Path(..., alias='jobId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdJobBackendEnvironmentNameJobIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/remove',
    description=""" Removes all backend environments from your Amplify project. """,
    tags=['api_management', 'backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_all_backends(
    app_id: str = Path(..., alias='appId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdRemovePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/storage',
    description=""" Creates a backend storage resource. """,
    tags=[
        'api_management',
        'auth_config_management',
        'configuration_management',
        'backend_operations_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_backend_storage(
    app_id: str = Path(..., alias='appId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdStoragePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/storage/{backendEnvironmentName}',
    description=""" Updates an existing backend storage resource. """,
    tags=['backend_operations_management', 'api_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_backend_storage(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdStorageBackendEnvironmentNamePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/storage/{backendEnvironmentName}/details',
    description=""" Gets details for a backend storage resource. """,
    tags=[
        'api_management',
        'configuration_management',
        'backend_operations_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_backend_storage(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdStorageBackendEnvironmentNameDetailsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/storage/{backendEnvironmentName}/import',
    description=""" Imports an existing backend storage resource. """,
    tags=[
        'api_management',
        'configuration_management',
        'backend_operations_management',
        'storage_service_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def import_backend_storage(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdStorageBackendEnvironmentNameImportPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/backend/{appId}/storage/{backendEnvironmentName}/remove',
    description=""" Removes the specified backend storage resource. """,
    tags=['backend_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_backend_storage(
    app_id: str = Path(..., alias='appId'),
    backend_environment_name: str = Path(..., alias='backendEnvironmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BackendAppIdStorageBackendEnvironmentNameRemovePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/s3Buckets',
    description=""" The list of S3 buckets in your account. """,
    tags=['s3_bucket_operations', 'api_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_s3_buckets(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: S3BucketsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
